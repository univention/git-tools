#!/usr/bin/python

import git
import re
import os
import os.path
import subprocess
import sys


class Branch(object):
	def __init__(self, name, repo):
		self.name = name
		self.commit = repo.commit(name)
		self._all_paths = None

	def get_all_paths(self):
		'''Return all paths of files that have been modified at any point in the history
		as well as files that are part of the branch's head.'''
		if self._all_paths is not None:
			# return cached value
			return self._all_paths

		# get all files existing at the branch's head
		self._all_paths = set([i.path for i in self.commit.tree.traverse() if i.type == 'blob'])

		# go back through the commit history and also collect those files that
		# have been modified in any way
		self._all_paths.update([ipath for icommit in self.commit.repo.iter_commits(self.commit) for ipath in icommit.stats.files.iterkeys()])

		return self._all_paths

	@property
	def latest_blobs(self):
		'''Return all blobs of the branch's head commit.'''
		for iobj in self.commit.tree.traverse():
			if iobj.type == 'blob':
				yield iobj

	@property
	def latest_paths(self):
		'''Return all file paths of the branch's head commit.'''
		for iblob in self.latest_blobs:
			yield iblob.path

	def __str__(self):
		return '<Branch "%s">' % (self.name, )

	def __repr__(self):
		return self.__str__()


def main(orig_branch_name, dest_branch_name):
	try:
		repo = git.Repo(search_parent_directories=True)
	except TypeError:
		repo = git.Repo()

	# iterate through whole commit tree and find branching points
	orig_branch = Branch(orig_branch_name, repo)
	dest_branch = Branch(dest_branch_name, repo)

	# delete files that should do not exist in the original branch 
	rm_files = set(dest_branch.latest_paths) - set(orig_branch.get_all_paths())
	for ipath in rm_files:
		try:
			print 'removing %s' % (ipath.encode('utf-8'), )
			os.unlink(ipath)
		except OSError as err:
			print '  could not remove %s: %s' % (ipath.encode('utf-8'), err)
			pass
	if not rm_files:
		print 'No file to remove :) .'

	# adjust the file mode if necessary
	common_paths = set(orig_branch.latest_paths).intersection(set(dest_branch.latest_paths))
	orig_branch_blobs = dict((iblob.path, iblob) for iblob in orig_branch.latest_blobs)
	dest_branch_blobs = dict((iblob.path, iblob) for iblob in dest_branch.latest_blobs)
	common_blobs = [(orig_branch_blobs[ipath], dest_branch_blobs[ipath]) for ipath in common_paths]
	chmod_files = [(iblob.path, iblob.mode) for iblob, jblob in common_blobs if iblob.mode != jblob.mode]
	for ipath, imode in chmod_files:
		print 'chmod %s -> %o' % (ipath.encode('utf-8'), imode)
		try:
			os.chmod(ipath, imode)
		except OSError as err:
			print '  could not chmod %s: %s' % (ipath.encode('utf-8'), err)
			pass


def print_usage():
	show_help = '-h' in sys.argv or '--help' in sys.argv
	wrong_args = len(sys.argv) != 3
	if show_help or wrong_args:
		print
		print 'usage: %s <origBranch> <destBranch>' % (os.path.basename(sys.argv[0]), )
		print
		print 'Removes files in <destBranch> that do not exist in <origBranch> and adjust access'
		print 'rights for files in <destBranch> in order to match permissions in <origBranch>.'
		print
		if wrong_args:
			sys.exit(1)
		sys.exit(0)


if __name__ == '__main__':
	print_usage()
	main(*sys.argv[1:])
