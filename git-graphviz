#!/usr/bin/python

import git
import re
import os
import os.path
import subprocess
import sys


def main():
	try:
		repo = git.Repo(search_parent_directories=True)
	except TypeError:
		repo = git.Repo()

	def get_heads():
		if len(sys.argv) > 1:
			# try to take the specified branches
			heads = []
			for iarg in sys.argv[1:]:
				try:
					icommit = repo.commit(iarg)
					heads.append(icommit)
				except git.BadName as exc:
					pass
			return heads
		# fallback -> take all branches
		return [ibranch.commit for ibranch in repo.branches]

	# iterate through whole commit tree and find branching points
	childs_per_commit = {}
	commits = get_heads()
	while commits:
		icommit = commits.pop(0)
		for iparent in icommit.parents:
			# count the vertix between icommit and its parent
			childs_per_commit.setdefault(iparent.hexsha, set()).add(icommit.hexsha)
			commits.append(iparent)
	for k in childs_per_commit.iterkeys():
		childs_per_commit[k] = len(childs_per_commit[k])

	branches = set([i.hexsha for i in get_heads()])

	def find_last_commit_of_sub_branch(commit):
		if not commit.parents:
			return (commit, 1)
		last_commit = commit
		commit = commit.parents[0]
		n = 1
		while True:
			# break conditions
			if commit.hexsha in branches:
				return (last_commit, n)
			if not commit.parents:
				return (commit, n + 1)
			if childs_per_commit[commit.hexsha] != 1:
				return (last_commit, n)

			# go to next commit in the past
			n += 1
			last_commit = commit
			commit = commit.parents[0]

	# iterate over all sub branches and print graphviz representation
	commits = get_heads()
	commits_visited = set()
	vertices_added = set()
	print 'digraph G {'
	for icommit in commits:
		while icommit.parents and icommit not in commits_visited:
			last_commit, n = find_last_commit_of_sub_branch(icommit)
			isha, iname = icommit.name_rev.split()
			print '"{sha}"[label="{label} [{num}]"];'.format(sha=isha, label=iname, num=n)
			if last_commit.parents:
				iparent = last_commit.parents[0]
				vertex = (isha, iparent.hexsha)
				if vertex not in vertices_added:
					print '"{current}"->"{parent}";'.format(current=isha, parent=iparent.hexsha)
					vertices_added.add(vertex)
				icommit = iparent
			else:
				break
	print '}'

if __name__ == '__main__':
	if '-h' in sys.argv or '--help' in sys.argv:
		print
		print 'usage: %s [<branch1> ...]' % (os.path.basename(sys.argv[0]), )
		print
		sys.exit(0)
	main()
