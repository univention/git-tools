#!/usr/bin/python

import git
import re
import os
import os.path
import subprocess
import sys
from tempfile import NamedTemporaryFile

NULL_HEXSHA = '0000000000000000000000000000000000000000'


class CommitSeries(object):
	def __init__(self, commit, commits=None, parents=None):
		self.hexsha, self.label = commit.name_rev.split()
		self._commit = commit
		self.commits = commits or []
		self.parents = parents or []

	def write_node(self, fp):
		fp.write('"{hexsha}"[label="{label} [{num}]"];\n'.format(hexsha=self.hexsha, label=self.label, num=len(self.commits)))

	def write_vertices(self, fp):
		for iparent in self.parents:
			fp.write('"{current}"->"{parent}";\n'.format(current=self.hexsha, parent=iparent.hexsha))

	def traverse_until_branching_point(self, childs_per_commit):
		icommit = self._commit
		while True:
			h, l = icommit.name_rev.split()
			if childs_per_commit.get(icommit.hexsha, 0) > 1 and len(self.commits) > 0:
				# the current commit has multiple childs...
				# stop traversal and return the current commit
				return [icommit]

			# add commit to series and continue traversal
			self.commits.append(icommit.hexsha)

			if len(icommit.parents) == 0:
				# history ends here... stop traversal
				return []
			if len(icommit.parents) > 1:
				# the linear series ends here...
				# stop traversal and return all parents of current commit
				return icommit.parents

			# iterate to the next parent commit
			icommit = icommit.parents[0]


def get_branch_commits(repo, branch_names):
	if len(branch_names):
		# try to take the specified branches
		branch_commits = []
		for iarg in branch_names:
			try:
				icommit = repo.commit(iarg)
				branch_commits.append(icommit)
			except git.BadName as exc:
				pass
		return branch_commits
	# fallback -> take all branches
	return [ibranch.commit for ibranch in repo.branches]


def get_childs_per_commit(branch_commits):
	# iterate through whole commit tree and find branching points
	childs_per_commit = {}
	commits = list(branch_commits)
	while commits:
		icommit = commits.pop(0)
		for iparent in icommit.parents:
			# count the vertix between icommit and its parent
			childs_per_commit.setdefault(iparent.hexsha, set()).add(icommit.hexsha)
			commits.append(iparent)
	for k in childs_per_commit.iterkeys():
		childs_per_commit[k] = len(childs_per_commit[k])
	return childs_per_commit


def compute_commit_series(branch_names):
	try:
		repo = git.Repo(search_parent_directories=True)
	except TypeError:
		repo = git.Repo()

	# iterate over all sub branches and print graphviz representation
	branch_commits = get_branch_commits(repo, branch_names)
	print 'Found %d branch(es) to plot.' % (len(branch_commits), )

	print 'Detecting branching points (that might take a moment)...' 
	childs_per_commit = get_childs_per_commit(branch_commits)
	
	print 'Iterating through branches and re-group linear series of commits...'
	not_visited_commits = set(childs_per_commit.iterkeys())
	ncommits = len(not_visited_commits)
	commit_series_stack = [CommitSeries(icommit) for icommit in branch_commits]
	commit_series_final = {}
	while commit_series_stack:
		# update progress information
		sys.stdout.write('\rPorcessed commits: %d/%d' % (ncommits - len(not_visited_commits), ncommits))
		sys.stdout.flush()

		# process next series
		iseries = commit_series_stack.pop(0)
		if iseries.hexsha in commit_series_final:
			continue
		next_commits = iseries.traverse_until_branching_point(childs_per_commit)
		commit_series_final[iseries.hexsha] = iseries

		# add new series starting points to stack
		for jcommit in next_commits:
			jseries = CommitSeries(jcommit)
			commit_series_stack.append(jseries)

			# register series as parent of previous series
			iseries.parents.append(jseries)

		# update number of visisted commits
		not_visited_commits -= set(iseries.commits)

	return commit_series_final.values()


def create_graphviz_file(series):
	with NamedTemporaryFile(delete=False) as fp:
		fp.write('digraph G {\n')
		for iseries in series:
			iseries.write_node(fp)
			iseries.write_vertices(fp)
		fp.write('}\n')
	print
	print 'Done :)'
	return fp.name


def plot_svg_file(in_file, out_file):
	subprocess.call(['dot', '-Tsvg', '-o%s' % (out_file, ), in_file])


def main(out_file, branches):
	commit_series = compute_commit_series(branches)
	graphviz_file = create_graphviz_file(commit_series)
	plot_svg_file(graphviz_file, out_file)
	os.unlink(graphviz_file)


def usage():
	print
	print 'usage: %s <svgOutputFile> [<branch1> ...]' % (os.path.basename(sys.argv[0]), )
	print
	print 'Creates a compact visual representation of the branches in the Git repository.'
	print 'Linear commits are represented as one node in a graph in order to improve'
	print 'the readability the basic tree structure of a more complex git project.'
	print 'If no branches are specified, all branches of the repository are plotted.'
	print
	print 'Graphviz is needed as dependency. The output format is SVG.'
	print


if __name__ == '__main__':
	wrong_args = len(sys.argv) < 2
	print_usage = '-h' in sys.argv or '--help' in sys.argv
	if print_usage or wrong_args:
		usage()
		if wrong_args:
			sys.exit(1)
		sys.exit(0)
		
	main(sys.argv[1], sys.argv[2:])
