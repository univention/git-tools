#!/bin/bash

function help {
	echo
 	echo "$(basename $0) [options] <svnRepo> <authorsFile>"
	echo
	echo "<svnRepo>        Path to the Univention SVN dev repository"
	echo "<authorsFile>    Path to the SVN authors file in order to porperly map usernames"
	echo "                 to real author names."
	echo  
	echo "Options:"
	echo "  -h, --help     Show this help only" 
	echo "  -i, --include  Call '. $(basename $0) -i' in order to import all defined script"
	echo "                 functions into your current shell session."
	echo 
	echo "Checkout of the UCS SVN repository via git-svn including rebasing branches"
	echo "for a continuous commit history."
	echo
}

function error {
	echo
	echo "ERROR: $1"
	echo
	exit 1
}

function check_authors_file {
	if [ ! -e "$AUTHORS_FILE" ]
	then
		error "The authors file could not be found at $AUTHORS_FILE!"
	fi
}

function write_git_config {
	# only add the git-svn configuration in case it has not already been specified
	if ! grep -q svn-remote .git/config
	then
		cat >> .git/config <<EOF
[svn]
    authorsfile = $AUTHORS_FILE
    rmdir = true
[svn-remote "svn"]
    url = $SVN
    fetch = trunk/ucs:refs/remotes/svn/trunk
    branches = branches/{ucs-2.0,ucs-2.1,ucs-2.2,ucs-2.3,ucs-2.4,ucs-3.0,ucs-3.1}/ucs:refs/remotes/svn/*
    branches = branches/ucs-3.1/{ucs-3.1-1,ucs-3.1-2}:refs/remotes/svn/*
    branches = branches/ucs-3.2/{ucs-3.2-0,ucs-3.2-1,ucs-3.2-2,ucs-3.2-3,ucs-3.2-4,ucs-3.2-5,ucs-3.2-6,ucs-3.2-7,ucs-3.2-8}:refs/remotes/svn/*
    branches = branches/ucs-3.3/{ucs-3.3-0,ucs-3.3-1}:refs/remotes/svn/*
    branches = branches/ucs-4.0/{ucs-4.0-0,ucs-4.0-1,ucs-4.0-2,ucs-4.0-3,ucs-4.0-4,ucs-4.0-5}:refs/remotes/svn/*
    branches = branches/ucs-4.1/{ucs-4.1-0,ucs-4.1-1,ucs-4.1-2,ucs-4.1-3,ucs-4.1-4}:refs/remotes/svn/*
    branches = branches/ucs-4.2/{ucs-4.2-0,ucs-4.2-1}:refs/remotes/svn/*
EOF
	fi
}

function get_first_commit {
	git rev-list "$@" | tail -1
}


# transforms the log into the following format:
#   <gitSha1>
#   <svnRevision1>
#   <gitSha2>
#   <svnRevision2>
function parse_log {
	sed -n 's/^commit \(.*\)/\1/p; s/^\s*git-svn-id.*@\([0-9]\+\)\s.*/\1/p'
}

# find the SVN revision prior to the given revision searching the given branch
# @param: git_branch
# @param: svn_revision
function get_preceding_rev {
	# note the following command does not work: git svn find-rev -B "r$2" "$1"
	local revs=($(git log "$1" | parse_log))
	local nrevs=${#revs[@]}
	local -i i irev rev=$2
	# iterate over the different commits... every even entry refers to a git sha
	# and every uneven entry refers to a svn revision number (see parse_log)
	for ((i=1; i<nrevs; i+=2))
	do
			# irev is of type integer and >0 if the assigned value is an integer;
			# if irev==0, parsing to integer has failed
			irev=${revs[i]}
			if [ "$irev" -gt 0 -a "$irev" -lt "$rev" ]
			then
					echo "${revs[i-1]}"
					return 0
			fi
	done
}

function git_svn_fetch {
	while true; do
		# for large checkouts, it can happen that git-svn crashes
		# ... in this case we simply will call the command again
		git svn fetch "$@" && break
		if [ -e .git/gc.log ]
		then
			# too many unreferenced objects, call gc to clean up the objects
			git gc
			rm -f .git/gc.log
		fi
	done
}

function create_local_branches {
	git branch -a | grep ucs | (
		while read remote_branch
		do
			local_branch=${remote_branch##*/}
			git checkout -b "$local_branch" "$remote_branch"
		done
	)
}

# Rebase a whole git subtree.
# the main branch is rebased first in order to find all files which
# need to be removed before rebasing recursively all branches connected
# with the main branch 
function rebase {
	local branch=$1
	local upstream_branch=$2
	local split_at_svn_rev=$3
	local split_branch="${upstream_branch}-split"

	# split off before r22331 and remove deprecated packages
	split_commit=$(get_preceding_rev $upstream_branch $split_at_svn_rev) 
	git checkout -b "$split_branch" "$split_commit"

	# first rebase to figure out which files need to be deleted
	~/sandbox/git-rebase-tree "$split_branch" "$(get_first_commit "$branch")" "$branch"

	# remove all files that should not be copied to <branch>.
	# ... use git ls-tree with option "-z" to avoid encoding problems
	local backup_branch=$(git branch | sed -n 's/^[\* ]*//g; /backup.*'"$branch"'/p')
	git checkout "$split_branch"
	~/sandbox/git-trim-branch "$backup_branch" "$branch"
	git commit -a -m "svn2git migration: remove files that have not been branched to $branch"

	# restore original branch and rebase _all_ connected branches
	git branch -M "$backup_branch" "$branch"
	~/sandbox/git-rebase-tree "$split_branch" "$(get_first_commit "$branch")" 
}


if [ "$1" = "-i" -o "$1" = "--include" ]
then
	return
fi

if [ "$1" = "-h" -o "$1" = "--help" -o "$#" != 2 ]
then
	help
	exit 0
fi

SVN="$1"
AUTHORS_FILE="$2"

# basic sanity checks
check_authors_file

# initial checkout of UCS repository via git-svn
write_git_config
git_svn_fetch
git gc
create_local_branches

# Note that some packages have been moved from internal (e.g., ucslint) into 3.0
# while other packages have been moved from components (e.g., nagios). This
# history will not be kept in git.
rebase ucs-3.0 ucs-2.4 22331 
rebase ucs-3.2-0 ucs-3.1-2 41107
rebase ucs-3.2-2 ucs-3.2-1 49765
rebase ucs-4.0-0 ucs-3.2-2 51102

